import _has from 'lodash/has';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';


var withKeysPropType = function withKeysPropType(keys) {
  return function (props, propName, componentName) {
    var prop = props[propName];
    if (prop) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.keys(prop)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          if (keys.indexOf(key) === -1) {
            return new Error('Unknown `' + propName + '` key `' + key + '`. Check the render method ' + ('of `' + componentName + '`.'));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    return undefined;
  };
};

export default function translatable(defaultTranslations) {
  return function (Composed) {
    function Translatable(props) {
      var translations = props.translations,
          otherProps = _objectWithoutProperties(props, ['translations']);

      var translate = function translate(key) {
        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        var translation = translations && _has(translations, key) ? translations[key] : defaultTranslations[key];
        if (typeof translation === 'function') {
          return translation.apply(undefined, params);
        }
        return translation;
      };

      return React.createElement(Composed, _extends({ translate: translate }, otherProps));
    }

    var name = Composed.displayName || Composed.name || 'UnknownComponent';

    Translatable.displayName = 'Translatable(' + name + ')';

    Translatable.propTypes = {
      translations: withKeysPropType(Object.keys(defaultTranslations))
    };

    return Translatable;
  };
}